from config import GPT_MODEL, GPT_VISION_MODEL
import requests

def generate_svg_code(user_input, first_iteration, conversation_history, feedback, api_key):
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {api_key}"
    }
    
    # Add user message to conversation history
    if (first_iteration):
        conversation_history.append(
        {
            "role": "system",
            "content": "You will generate vector graphics via SVG code. We will apply a reinforcement learning approach, where feedback will be provided in every iteration, and you will improve upon the vector graphic accordingly."
        })
        conversation_history.append(
        {
            "role": "user",
            "content": f"Generate simplistic SVG code representing a {user_input}. Ensure the SVG is of size 128x128."
        }    
        )
    else:
        conversation_history.append({
            "role": "user",
            "content": f"Generate simplistic SVG code representing a {user_input}. Ensure the SVG is of size 128x128. The feedback provided for the graphic generated in the prior iteration was: {feedback}"
        })

    payload = {
        "model": GPT_MODEL, 
        "messages": conversation_history,
        "max_tokens": 3000
    }

    response = requests.post("https://api.openai.com/v1/chat/completions", headers=headers, json=payload)
    response_json = response.json()
    content = response_json['choices'][0]['message']['content']
    
    # Append the response to the conversation history
    conversation_history.append({
        "role": "assistant",
        "content": content
    })
    tokens_used = response_json['usage']['total_tokens']
    return content, tokens_used

def extract_svg_code(full_string):
    start_tag = '<svg'
    end_tag = '</svg>'

    # Find the start and end indices of the SVG code
    start_index = full_string.find(start_tag)
    end_index = full_string.find(end_tag)

    # Extract and return the SVG code
    # Add len(end_tag) to include the end tag in the output
    return full_string[start_index:end_index + len(end_tag)]

def get_image_feedback(base64_image, user_input, api_key):
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {api_key}"
    }
    payload = {
        "model": GPT_VISION_MODEL,
        "messages": [
            {
                "role": "system",
                "content": "You will be provided with images that were converted from SVG vector graphics. Evaluate and provide feedback on one thing that needs to change to improve the graphic.",
            },
            {
                "role": "user",
                "content": [
                    {
                        "type": "text",
                        "text": "The attached image is the current output for a " + user_input + " generated by GPT using SVG code. Please provide concise feedback focusing on a single key aspect that needs improvement to better represent the described object. In particular, if a certain feature is missing, or a feature has been drawn in the incorrect location, suggest to fix the feature. Provide only one very short sentence."
                    },
                    {
                        "type": "image_url",
                        "image_url": {
                            "url": f"data:image/jpeg;base64,{base64_image}"
                        }
                    }
                ]
            }
        ],
        "max_tokens": 300
    }
    response = requests.post("https://api.openai.com/v1/chat/completions", headers=headers, json=payload)
    response_json = response.json()
    content = response_json['choices'][0]['message']['content']
    tokens_used = response_json['usage']['total_tokens']
    return content, tokens_used
